/*
题目描述 （省略掉引言） 考虑下面的程序：

输入 n
输出 n
如果 n == 1 退出程序
如果 n 是奇数，n = 3 * n + 1
如果 n 是偶数 n /= 2
回到第 2 步 若输入 22，会得出下面的数列： 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 我们推测，对于任何输入的正整数 n，程序最终都会输出 1。(n <= 1,000,000 时，保证推论正确) 给定 n，可以计算这个程序输出的所有数字的数量（包括最后的 1）。我们把输出的数字总数称为这个 n 的周期长度。对于上面的例子，周期长度为 16。 对于输入的每对 i, j，计算 [i, j] 内所有数字区间长度的最大值。
输入输出格式 输入格式: 输入几对整数 i, j，保证 0 < i,j <= 10,000 对于每对 i, j，你需要计算 [i, j] 内最大区间长度。数据保证 32 位整数在计算过程中不溢出。 输出格式: 对于每对 i, j，先输出 i, j，再输出 [i, j] 范围内最大周期长度，每个数字中间一个空格，然后换行

样例输入:
1 10
100 200
201 210
900 1000
样例输出：
1 10 20
100 200 125
201 210 89
900 1000 174
 */
#include <iostream>
using namespace std;

int judge2();
int m, n, p, q, a, b, c, d, e = 0;
int m1[4] = {0, 0, 0, 0};
int n1[4] = {0, 0, 0, 0};
int e1[4] = {0, 0, 0, 0};
int judge2()
{
    for (int j = m; j <= n; j++)
    { //对每一个数进行判断
        int i = j;
        int arr[300];
        c = 0;
        for (int p = 0;; p++)
        {
            arr[p] = i;
            c++;
            if (i == 1)
                break;
            else if (i % 2 == 0)
                i /= 2;
            else
                i = i * 3 + 1;
        }
        if (e < c)
            e = c; //e为最大周期长度
    }
}

int main()
{
    for (int i = 0; i < 4; i++)
    {
        cin >> m1[i] >> n1[i];
        m = m1[i];
        n = n1[i];
        judge2();
        e1[i] = e;
        e = 0;
    }
    for (int i = 0; i < 4; i++)
    {
        cout << m1[i] << " " << n1[i] << " " << e1[i] << endl;
    }
}